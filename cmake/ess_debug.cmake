
function(print_prop TARGET PROP)
    get_target_property(VAR ${TARGET} ${PROP})
    if (VAR)
        message(STATUS "  ${PROP} = ${VAR}")
    endif()

    if(${PROP} STREQUAL TYPE)
        return()
    endif()

    if (CMAKE_BUILD_TYPE)
        string(TOUPPER ${CMAKE_BUILD_TYPE} TYPE)
        get_target_property(VAR ${TARGET} ${PROP}_${TYPE})
        if (VAR)
            message(STATUS "  ${PROP}_${TYPE} = ${VAR}")
        endif()
    else()
        foreach(TYPE ${CMAKE_CONFIGURATION_TYPES})
            string(TOUPPER ${TYPE} TYPE)
            get_target_property(VAR ${TARGET} ${PROP}_${TYPE})
            if (VAR)
                message(STATUS "  ${PROP}_${TYPE} = ${VAR}")
            endif()
        endforeach()
    endif()

endfunction()

function(ess_debug_target TARGET)

    if (NOT TARGET ${TARGET})
        message(STATUS "${TARGET} is not a target")
        return()
    endif()

    message(STATUS " == DEBUG ${TARGET} ==")
    get_target_property(IS_IMPORTED ${TARGET} IMPORTED)

    if(IS_IMPORTED)
        message(STATUS "${TARGET} is an imported target:")

        print_prop(${TARGET} TYPE)

        get_target_property(KIND ${TARGET} TYPE)
        if (KIND AND ${KIND} STREQUAL INTERFACE_LIBRARY)
            print_prop(${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
            print_prop(${TARGET} INTERFACE_COMPILE_DEFINITIONS)
            print_prop(${TARGET} INTERFACE_COMPILE_FEATURES)
            print_prop(${TARGET} INTERFACE_COMPILE_OPTIONS)
            print_prop(${TARGET} INTERFACE_LINK_LIBRARIES)
            print_prop(${TARGET} MAP_IMPORTED_CONFIG)
        else()
            print_prop(${TARGET} LOCATION)
            print_prop(${TARGET} IMPORTED_LOCATION)
            print_prop(${TARGET} IMPORTED_IMPLIB)
            print_prop(${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
            print_prop(${TARGET} INTERFACE_COMPILE_DEFINITIONS)
            print_prop(${TARGET} INTERFACE_COMPILE_FEATURES)
            print_prop(${TARGET} INTERFACE_COMPILE_OPTIONS)
            print_prop(${TARGET} INTERFACE_LINK_LIBRARIES)
            print_prop(${TARGET} MAP_IMPORTED_CONFIG)
        endif()

    else()
        message(STATUS "${TARGET} is a compiled target:")
        print_prop(${TARGET} TYPE)
        print_prop(${TARGET} COMPILE_DEFINITIONS)
        print_prop(${TARGET} COMPILE_FLAGS)
        print_prop(${TARGET} COMPILE_OPTIONS)
        print_prop(${TARGET} LINKER_FLAGS)
        print_prop(${TARGET} INCLUDE_DIRECTORIES)
        print_prop(${TARGET} INTERFACE_INCLUDE_DIRECTORIES)
        print_prop(${TARGET} INTERFACE_COMPILE_DEFINITIONS)
        print_prop(${TARGET} INTERFACE_COMPILE_FEATURES)
        print_prop(${TARGET} INTERFACE_COMPILE_OPTIONS)
        print_prop(${TARGET} LINK_LIBRARIES)
        print_prop(${TARGET} MAP_IMPORTED_CONFIG)
        print_prop(${TARGET} CUDA_PTX_COMPILATION)
        print_prop(${TARGET} CUDA_SEPARABLE_COMPILATION)
        print_prop(${TARGET} CUDA_RESOLVE_DEVICE_SYMBOLS)
        print_prop(${TARGET} CUDA_EXTENSIONS)
        print_prop(${TARGET} CUDA_STANDARD)
        print_prop(${TARGET} CUDA_STANDARD_REQUIRED)
        print_prop(${TARGET} CXX_EXTENSIONS)
        print_prop(${TARGET} CXX_STANDARD)
        print_prop(${TARGET} CXX_STANDARD_REQUIRED)
        print_prop(${TARGET} RUNTIME_OUTPUT_DIRECTORY)
        print_prop(${TARGET} ARCHIVE_OUTPUT_DIRECTORY)
        print_prop(${TARGET} LIBRARY_OUTPUT_DIRECTORY)
    endif()
    message(STATUS " == ========== ==")

endfunction()


function (ess_assert)
    set(OPTIONS)
    set(SINGLES FILE_EXISTS;IS_TARGET;VAR_DEFINED;MESSAGE)
    set(MULTI   "")
    cmake_parse_arguments(ASSERT "${OPTIONS}" "${SINGLES}" "${MULTI}" ${ARGN} )

    if (DEFINED ASSERT_FILE_EXISTS)
        if(NOT EXISTS ${ASSERT_FILE_EXISTS})
            message(FATAL_ERROR "${ASSERT_MESSAGE}\nassert failed: file ${ASSERT_FILE_EXISTS} does not exist")
        endif()
    endif()

    if (DEFINED ASSERT_IS_TARGET )
        if(NOT TARGET ${ASSERT_IS_TARGET})
            message(FATAL_ERROR "${ASSERT_MESSAGE}\nassert failed: ${ASSERT_IS_TARGET} is not a target")
        endif()
    endif()

    if (DEFINED ASSERT_VAR_DEFINED )
        if(NOT ${ASSERT_VAR_DEFINED})
            message(FATAL_ERROR "${ASSERT_MESSAGE}\nassert failed: variable ${ASSERT_VAR_DEFINED} was not defined, or has no visiblity")
        endif()
    endif()

endfunction()


option(ESS_CMAKE_DEBUG "flag to enable debug output" off)
function (ess_debug_message)
    if(ESS_CMAKE_DEBUG)
        message(STATUS "DEBUG> ${ARGN}")
    endif()
endfunction()